name: Test CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: |
          cypress-tests/package-lock.json
          frontend/package-lock.json
          backend/package-lock.json

    - name: Install Cypress dependencies
      working-directory: cypress-tests
      run: npm ci

    - name: Install Frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Install Backend dependencies
      working-directory: backend
      run: npm ci

    - name: Install Newman for API testing
      run: npm install -g newman

    - name: Create Postman collection directory
      run: mkdir -p cypress-tests/postman

    - name: Create Postman collection file
      working-directory: cypress-tests
      run: |
        cat > postman/qa-collection.json << 'EOF'
        {
          "info": {
            "name": "Todo Manager API Tests",
            "description": "API tests for Todo Manager application",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          },
          "item": [
            {
              "name": "Health Check",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/health",
                  "host": ["{{baseUrl}}"],
                  "path": ["health"]
                }
              },
              "response": []
            },
            {
              "name": "Login - Valid Credentials",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has token\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('token');",
                      "    pm.expect(jsonData).to.have.property('user');",
                      "    pm.expect(jsonData.user).to.have.property('email', 'user@example.com');",
                      "});",
                      "",
                      "if (pm.response.json().token) {",
                      "    pm.environment.set('authToken', pm.response.json().token);",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"Mm12345!\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/login",
                  "host": ["{{baseUrl}}"],
                  "path": ["login"]
                }
              },
              "response": []
            },
            {
              "name": "Login - Invalid Credentials",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Error message is correct\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData.message).to.include('Invalid credentials');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"wrong@example.com\",\n  \"password\": \"wrongpassword\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/login",
                  "host": ["{{baseUrl}}"],
                  "path": ["login"]
                }
              },
              "response": []
            },
            {
              "name": "Get Todos - Unauthorized",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/todos",
                  "host": ["{{baseUrl}}"],
                  "path": ["todos"]
                }
              },
              "response": []
            },
            {
              "name": "Get Todos - Authorized",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is an array\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/todos",
                  "host": ["{{baseUrl}}"],
                  "path": ["todos"]
                }
              },
              "response": []
            },
            {
              "name": "Create Todo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Todo created successfully\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData).to.have.property('title', 'Test Todo');",
                      "    pm.expect(jsonData).to.have.property('description', 'Test Description');",
                      "    pm.expect(jsonData).to.have.property('completed', false);",
                      "});",
                      "",
                      "if (pm.response.json().id) {",
                      "    pm.environment.set('todoId', pm.response.json().id);",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Test Todo\",\n  \"description\": \"Test Description\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/todos",
                  "host": ["{{baseUrl}}"],
                  "path": ["todos"]
                }
              },
              "response": []
            },
            {
              "name": "Update Todo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Todo updated successfully\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('title', 'Updated Todo');",
                      "    pm.expect(jsonData).to.have.property('description', 'Updated Description');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Updated Todo\",\n  \"description\": \"Updated Description\",\n  \"completed\": true\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/todos/{{todoId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["todos", "{{todoId}}"]
                }
              },
              "response": []
            },
            {
              "name": "Delete Todo",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Todo deleted successfully\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData.message).to.include('deleted');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/todos/{{todoId}}",
                  "host": ["{{baseUrl}}"],
                  "path": ["todos", "{{todoId}}"]
                }
              },
              "response": []
            }
          ],
          "variable": [
            {
              "key": "baseUrl",
              "value": "http://localhost:5001",
              "type": "string"
            },
            {
              "key": "authToken",
              "value": "",
              "type": "string"
            },
            {
              "key": "todoId",
              "value": "",
              "type": "string"
            }
          ]
        }
        EOF

    - name: Create Postman environment file
      working-directory: cypress-tests
      run: |
        cat > postman/qa-environment.json << 'EOF'
        {
          "id": "qa-environment",
          "name": "QA Environment",
          "values": [
            {
              "key": "baseUrl",
              "value": "http://localhost:5001",
              "type": "default",
              "enabled": true
            },
            {
              "key": "authToken",
              "value": "",
              "type": "secret",
              "enabled": true
            },
            {
              "key": "todoId",
              "value": "",
              "type": "default",
              "enabled": true
            }
          ]
        }
        EOF

    - name: Start Backend Server
      working-directory: backend
      run: |
        npm run dev &
        echo $! > backend.pid
        sleep 5

    - name: Start Frontend Server
      working-directory: frontend
      run: |
        npm run dev &
        echo $! > frontend.pid
        sleep 5

    - name: Wait for Backend to be ready
      run: |
        echo "Waiting for backend to be ready..."
        timeout 60 bash -c 'until curl -f http://localhost:5001/health; do sleep 2; done'
        echo "Backend is ready!"

    - name: Wait for Frontend to be ready
      run: |
        echo "Waiting for frontend to be ready..."
        timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
        echo "Frontend is ready!"

    - name: Run Cypress Tests
      working-directory: cypress-tests
      run: |
        npx cypress run --record false --browser chrome --headless
      env:
        CI: true
        CYPRESS_baseUrl: http://localhost:3000

    - name: Run Postman API Tests
      working-directory: cypress-tests
      run: |
        newman run postman/qa-collection.json \
          -e postman/qa-environment.json \
          --reporters cli,junit \
          --reporter-junit-export results/api-test-results.xml \
          --bail

    - name: Upload Cypress screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: cypress-screenshots
        path: cypress-tests/cypress/screenshots/
        retention-days: 30

    - name: Upload Cypress videos
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cypress-videos
        path: cypress-tests/cypress/videos/
        retention-days: 30

    - name: Upload API test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: api-test-results
        path: cypress-tests/results/
        retention-days: 30

    - name: Stop Backend Server
      if: always()
      run: |
        if [ -f backend/backend.pid ]; then
          kill $(cat backend/backend.pid) || true
          rm backend/backend.pid
        fi

    - name: Stop Frontend Server
      if: always()
      run: |
        if [ -f frontend/frontend.pid ]; then
          kill $(cat frontend/frontend.pid) || true
          rm frontend/frontend.pid
        fi

    - name: Cleanup processes
      if: always()
      run: |
        pkill -f "node.*server.js" || true
        pkill -f "vite" || true
        pkill -f "cypress" || true 