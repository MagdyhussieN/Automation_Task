{
    "info": {
        "name": "Todo Manager API Tests",
        "description": "Comprehensive API tests for Todo Manager application covering authentication, CRUD operations, and error scenarios",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "version": "1.0.0"
    },
    "item": [
        {
            "name": "Health Check",
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{baseUrl}}/health",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "health"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "Authentication",
            "item": [
                {
                    "name": "Login - Valid Credentials",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has token\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('token');",
                                    "    pm.expect(jsonData).to.have.property('user');",
                                    "    pm.expect(jsonData.user).to.have.property('email', 'user@example.com');",
                                    "    pm.expect(jsonData.user).to.have.property('name', 'Demo User');",
                                    "});",
                                    "",
                                    "if (pm.response.json().token) {",
                                    "    pm.environment.set('authToken', pm.response.json().token);",
                                    "    console.log('Auth token set:', pm.response.json().token);",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"Mm12345!\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/login",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "login"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Login - Invalid Email",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 401\", function () {",
                                    "    pm.response.to.have.status(401);",
                                    "});",
                                    "",
                                    "pm.test(\"Error message is correct\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('message');",
                                    "    pm.expect(jsonData.message).to.include('Invalid credentials');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"email\": \"wrong@example.com\",\n  \"password\": \"Mm12345!\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/login",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "login"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Login - Invalid Password",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 401\", function () {",
                                    "    pm.response.to.have.status(401);",
                                    "});",
                                    "",
                                    "pm.test(\"Error message is correct\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('message');",
                                    "    pm.expect(jsonData.message).to.include('Invalid credentials');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"wrongpassword\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/login",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "login"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Login - Missing Fields",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 400\", function () {",
                                    "    pm.response.to.have.status(400);",
                                    "});",
                                    "",
                                    "pm.test(\"Error message is correct\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('message');",
                                    "    pm.expect(jsonData.message).to.include('required');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"email\": \"user@example.com\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/login",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "login"
                            ]
                        }
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "Todo Management",
            "item": [
                {
                    "name": "Get Todos - Unauthorized",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 401\", function () {",
                                    "    pm.response.to.have.status(401);",
                                    "});",
                                    "",
                                    "pm.test(\"Error message is correct\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('message');",
                                    "    pm.expect(jsonData.message).to.include('Access token required');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/todos",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "todos"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get Todos - Authorized",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response is an array\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.be.an('array');",
                                    "});",
                                    "",
                                    "pm.test(\"Todos have required properties\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    if (jsonData.length > 0) {",
                                    "        var todo = jsonData[0];",
                                    "        pm.expect(todo).to.have.property('id');",
                                    "        pm.expect(todo).to.have.property('title');",
                                    "        pm.expect(todo).to.have.property('description');",
                                    "        pm.expect(todo).to.have.property('completed');",
                                    "        pm.expect(todo).to.have.property('createdAt');",
                                    "    }",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/todos",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "todos"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Create Todo - Valid Data",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 201\", function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "pm.test(\"Todo created successfully\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('id');",
                                    "    pm.expect(jsonData).to.have.property('title', 'Test Todo');",
                                    "    pm.expect(jsonData).to.have.property('description', 'Test Description');",
                                    "    pm.expect(jsonData).to.have.property('completed', false);",
                                    "    pm.expect(jsonData).to.have.property('createdAt');",
                                    "});",
                                    "",
                                    "if (pm.response.json().id) {",
                                    "    pm.environment.set('todoId', pm.response.json().id);",
                                    "    console.log('Todo ID set:', pm.response.json().id);",
                                    "}"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"title\": \"Test Todo\",\n  \"description\": \"Test Description\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/todos",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "todos"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Create Todo - Missing Title",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 400\", function () {",
                                    "    pm.response.to.have.status(400);",
                                    "});",
                                    "",
                                    "pm.test(\"Error message is correct\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('message');",
                                    "    pm.expect(jsonData.message).to.include('title');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"description\": \"Test Description\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/todos",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "todos"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Update Todo - Valid Data",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Todo updated successfully\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('id', pm.environment.get('todoId'));",
                                    "    pm.expect(jsonData).to.have.property('title', 'Updated Todo');",
                                    "    pm.expect(jsonData).to.have.property('description', 'Updated Description');",
                                    "    pm.expect(jsonData).to.have.property('completed', true);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"title\": \"Updated Todo\",\n  \"description\": \"Updated Description\",\n  \"completed\": true\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/todos/{{todoId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "todos",
                                "{{todoId}}"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Update Todo - Non-existent ID",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 404\", function () {",
                                    "    pm.response.to.have.status(404);",
                                    "});",
                                    "",
                                    "pm.test(\"Error message is correct\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('message');",
                                    "    pm.expect(jsonData.message).to.include('not found');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"title\": \"Updated Todo\",\n  \"description\": \"Updated Description\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/todos/99999",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "todos",
                                "99999"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Delete Todo - Valid ID",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Todo deleted successfully\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('message');",
                                    "    pm.expect(jsonData.message).to.include('deleted');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/todos/{{todoId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "todos",
                                "{{todoId}}"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Delete Todo - Non-existent ID",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 404\", function () {",
                                    "    pm.response.to.have.status(404);",
                                    "});",
                                    "",
                                    "pm.test(\"Error message is correct\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData).to.have.property('message');",
                                    "    pm.expect(jsonData.message).to.include('not found');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/todos/99999",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "todos",
                                "99999"
                            ]
                        }
                    },
                    "response": []
                }
            ]
        }
    ],
    "variable": [
        {
            "key": "baseUrl",
            "value": "http://localhost:5001",
            "type": "string"
        },
        {
            "key": "authToken",
            "value": "",
            "type": "string"
        },
        {
            "key": "todoId",
            "value": "",
            "type": "string"
        }
    ]
}